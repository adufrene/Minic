# Towers of Hanoi 

struct plate 
{
   int size;
   struct plate plateUnder;
};

struct plate peg1;
struct plate peg2;
struct plate peg3;
int numMoves;

fun move(int from, int to) void 
{
   struct plate plateToMove;
   
   if (from == 1) {
      plateToMove = peg1;
      peg1 = peg1.plateUnder;
   } 
   else
   {
      if (from == 2) {
         plateToMove = peg2;
         peg2 = peg2.plateUnder;
      }
      else {
         plateToMove = peg3;
         peg3 = peg3.plateUnder;
      }
   }
   
   if (to == 1) {
      plateToMove.plateUnder = peg1;
      peg1 = plateToMove;
   }
   else 
   {
      if (to == 2) {
         plateToMove.plateUnder = peg2;
         peg2 = plateToMove;
      }
      else 
      {
         plateToMove.plateUnder = peg3;
         peg3 = plateToMove;
      }
   }
   
   numMoves = numMoves + 1;
}

fun hanoi(int n, int from, int to, int other) void
{
   if (n == 1) {
      move(from, to);
   } 
   else 
   {
      hanoi(n - 1, from, other, to);
      move(from, to);
      hanoi(n - 1, other, to, from);
   }
}

fun printPeg(struct plate peg) void
{
   struct plate aPlate;
   
   aPlate = peg;
   
   while (aPlate != null) 
   {
      print aPlate.size endl;
      aPlate = aPlate.plateUnder;
   }
}

fun main() int
{
   int count, numPlates;
   struct plate aPlate;
   
   peg1 = null;
   peg2 = null;
   peg3 = null;
   numMoves = 0;

   read numPlates;

   if (numPlates >= 1) 
   {
      count = numPlates;
      
      while (count != 0) 
      {
         aPlate = new plate;
         aPlate.size = count;
         aPlate.plateUnder = peg1;
         peg1 = aPlate;
         count = count - 1;
      }
      
      # Print the peg number followed by any plates
      # it has starting from the top of the stack
      # to the bottom. At this point, peg 1
      # should have all the plates.
      print 1 endl;
      printPeg(peg1);
      print 2 endl;
      printPeg(peg2);
      print 3 endl;
      printPeg(peg3);

      hanoi(numPlates, 1, 3, 2);
      
      # At this point, peg 3
      # should have all the plates.
      print 1 endl;
      printPeg(peg1);
      print 2 endl;
      printPeg(peg2);
      print 3 endl;
      printPeg(peg3);
      
      # Print the number of moves.
      print numMoves endl;

      while (peg3 != null) 
      {
         aPlate = peg3;
         peg3 = peg3.plateUnder;
         delete aPlate;
      }
   }

   return 0;
}
