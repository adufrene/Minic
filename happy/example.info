-----------------------------------------------------------------------------
Info file generated by Happy Version 1.19.5 from example.y
-----------------------------------------------------------------------------


rule 12 is unused

-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_calc -> Exp                                 (0)
	Exp -> let var '=' Exp in Exp                      (1)
	Exp -> Exp1                                        (2)
	Exp1 -> Exp1 '+' Term                              (3)
	Exp1 -> Exp1 '-' Term                              (4)
	Exp1 -> Term                                       (5)
	Term -> Term '*' Factor                            (6)
	Term -> Term '/' Factor                            (7)
	Term -> Factor                                     (8)
	Factor -> int                                      (9)
	Factor -> var                                      (10)
	Factor -> '(' Exp ')'                              (11)
	lineno ->                                          (12)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	let            { TokenLet }
	in             { TokenIn }
	int            { TokenInt $$ }
	var            { TokenVar $$ }
	'='            { TokenEq }
	'+'            { TokenPlus }
	'-'            { TokenMinus }
	'*'            { TokenTimes }
	'/'            { TokenDiv }
	'('            { TokenOB }
	')'            { TokenCB }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_calc     rule  0
	Exp             rules 1, 2
	Exp1            rules 3, 4, 5
	Term            rules 6, 7, 8
	Factor          rules 9, 10, 11
	lineno          rule  12

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0


	let            shift, and enter state 2
	int            shift, and enter state 7
	var            shift, and enter state 8
	'('            shift, and enter state 9

	Exp            goto state 3
	Exp1           goto state 4
	Term           goto state 5
	Factor         goto state 6

State 1


	let            shift, and enter state 2


State 2

	Exp -> let . var '=' Exp in Exp                     (rule 1)

	var            shift, and enter state 15


State 3

	%start_calc -> Exp .                                (rule 0)

	%eof           accept


State 4

	Exp -> Exp1 .                                       (rule 2)
	Exp1 -> Exp1 . '+' Term                             (rule 3)
	Exp1 -> Exp1 . '-' Term                             (rule 4)

	in             reduce using rule 2
	'+'            shift, and enter state 13
	'-'            shift, and enter state 14
	')'            reduce using rule 2
	%eof           reduce using rule 2


State 5

	Exp1 -> Term .                                      (rule 5)
	Term -> Term . '*' Factor                           (rule 6)
	Term -> Term . '/' Factor                           (rule 7)

	in             reduce using rule 5
	'+'            reduce using rule 5
	'-'            reduce using rule 5
	'*'            shift, and enter state 11
	'/'            shift, and enter state 12
	')'            reduce using rule 5
	%eof           reduce using rule 5


State 6

	Term -> Factor .                                    (rule 8)

	in             reduce using rule 8
	'+'            reduce using rule 8
	'-'            reduce using rule 8
	'*'            reduce using rule 8
	'/'            reduce using rule 8
	')'            reduce using rule 8
	%eof           reduce using rule 8


State 7

	Factor -> int .                                     (rule 9)

	in             reduce using rule 9
	'+'            reduce using rule 9
	'-'            reduce using rule 9
	'*'            reduce using rule 9
	'/'            reduce using rule 9
	')'            reduce using rule 9
	%eof           reduce using rule 9


State 8

	Factor -> var .                                     (rule 10)

	in             reduce using rule 10
	'+'            reduce using rule 10
	'-'            reduce using rule 10
	'*'            reduce using rule 10
	'/'            reduce using rule 10
	')'            reduce using rule 10
	%eof           reduce using rule 10


State 9

	Factor -> '(' . Exp ')'                             (rule 11)

	let            shift, and enter state 2
	int            shift, and enter state 7
	var            shift, and enter state 8
	'('            shift, and enter state 9

	Exp            goto state 10
	Exp1           goto state 4
	Term           goto state 5
	Factor         goto state 6

State 10

	Factor -> '(' Exp . ')'                             (rule 11)

	')'            shift, and enter state 21


State 11

	Term -> Term '*' . Factor                           (rule 6)

	int            shift, and enter state 7
	var            shift, and enter state 8
	'('            shift, and enter state 9

	Factor         goto state 20

State 12

	Term -> Term '/' . Factor                           (rule 7)

	int            shift, and enter state 7
	var            shift, and enter state 8
	'('            shift, and enter state 9

	Factor         goto state 19

State 13

	Exp1 -> Exp1 '+' . Term                             (rule 3)

	int            shift, and enter state 7
	var            shift, and enter state 8
	'('            shift, and enter state 9

	Term           goto state 18
	Factor         goto state 6

State 14

	Exp1 -> Exp1 '-' . Term                             (rule 4)

	int            shift, and enter state 7
	var            shift, and enter state 8
	'('            shift, and enter state 9

	Term           goto state 17
	Factor         goto state 6

State 15

	Exp -> let var . '=' Exp in Exp                     (rule 1)

	'='            shift, and enter state 16


State 16

	Exp -> let var '=' . Exp in Exp                     (rule 1)

	let            shift, and enter state 2
	int            shift, and enter state 7
	var            shift, and enter state 8
	'('            shift, and enter state 9

	Exp            goto state 22
	Exp1           goto state 4
	Term           goto state 5
	Factor         goto state 6

State 17

	Exp1 -> Exp1 '-' Term .                             (rule 4)
	Term -> Term . '*' Factor                           (rule 6)
	Term -> Term . '/' Factor                           (rule 7)

	in             reduce using rule 4
	'+'            reduce using rule 4
	'-'            reduce using rule 4
	'*'            shift, and enter state 11
	'/'            shift, and enter state 12
	')'            reduce using rule 4
	%eof           reduce using rule 4


State 18

	Exp1 -> Exp1 '+' Term .                             (rule 3)
	Term -> Term . '*' Factor                           (rule 6)
	Term -> Term . '/' Factor                           (rule 7)

	in             reduce using rule 3
	'+'            reduce using rule 3
	'-'            reduce using rule 3
	'*'            shift, and enter state 11
	'/'            shift, and enter state 12
	')'            reduce using rule 3
	%eof           reduce using rule 3


State 19

	Term -> Term '/' Factor .                           (rule 7)

	in             reduce using rule 7
	'+'            reduce using rule 7
	'-'            reduce using rule 7
	'*'            reduce using rule 7
	'/'            reduce using rule 7
	')'            reduce using rule 7
	%eof           reduce using rule 7


State 20

	Term -> Term '*' Factor .                           (rule 6)

	in             reduce using rule 6
	'+'            reduce using rule 6
	'-'            reduce using rule 6
	'*'            reduce using rule 6
	'/'            reduce using rule 6
	')'            reduce using rule 6
	%eof           reduce using rule 6


State 21

	Factor -> '(' Exp ')' .                             (rule 11)

	in             reduce using rule 11
	'+'            reduce using rule 11
	'-'            reduce using rule 11
	'*'            reduce using rule 11
	'/'            reduce using rule 11
	')'            reduce using rule 11
	%eof           reduce using rule 11


State 22

	Exp -> let var '=' Exp . in Exp                     (rule 1)

	in             shift, and enter state 23


State 23

	Exp -> let var '=' Exp in . Exp                     (rule 1)

	let            shift, and enter state 2
	int            shift, and enter state 7
	var            shift, and enter state 8
	'('            shift, and enter state 9

	Exp            goto state 24
	Exp1           goto state 4
	Term           goto state 5
	Factor         goto state 6

State 24

	Exp -> let var '=' Exp in Exp .                     (rule 1)

	in             reduce using rule 1
	')'            reduce using rule 1
	%eof           reduce using rule 1


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 13
Number of terminals: 11
Number of non-terminals: 6
Number of states: 25
